# Generated by Django 3.2.6 on 2022-03-19 20:20

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import inventory.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('Customers_Sales', '0012_auto_20211004_1802'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('suppliers', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_name', models.CharField(max_length=250)),
                ('description', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='InventoryAllowance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('amount', models.FloatField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='InventoryImag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('img', models.ImageField(help_text='Inventory image', upload_to=inventory.models.inventory_imag_directory_path)),
            ],
            options={
                'verbose_name': 'Inventory Image',
                'verbose_name_plural': 'Inventory Images',
            },
        ),
        migrations.CreateModel(
            name='InventoryPrice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cost_per_unit', models.FloatField()),
                ('number_of_unit', models.PositiveIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='InventoryReturn',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('num_returned', models.PositiveIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='PayInvoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('amount_paid', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='PaymentSalesTerm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('config', models.CharField(help_text='Specify name for this setting', max_length=100)),
                ('terms', models.IntegerField(choices=[(0, 'Pay CASH'), (1, 'Cash On Demand'), (2, 'Due in number of days'), (3, 'Due at the end of month'), (4, 'Due on the next Month'), (5, 'let me specify the due date DD-MM-YYY')], default=0)),
                ('num_of_days_due', models.PositiveSmallIntegerField(default=0, help_text='in case of you want to specify number of days due')),
                ('discount_in_days', models.PositiveSmallIntegerField(blank=True, default=0, null=True, validators=[django.core.validators.MaxValueValidator(32)])),
                ('discount_percentage', models.FloatField(default=0, help_text='Enter discount like this 5%>>will be  5 not 0.05')),
                ('pay_freight_out', models.IntegerField(choices=[(1, 'Cash'), (2, 'Accounts Payable')], help_text='How You will pay frieht-out?')),
            ],
        ),
        migrations.CreateModel(
            name='Sale',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('frieght_out', models.FloatField(default=0)),
                ('sales_date', models.DateField(default=inventory.models.current_date)),
                ('due_date', models.DateField(blank=True, help_text='optional if you want to specify it by yourself', null=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Customers_Sales.customer')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('term', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.paymentsalesterm')),
            ],
            bases=(inventory.models.DueDateMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Sold_Item',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sale_price', models.FloatField()),
                ('quantity', models.FloatField()),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.inventoryprice')),
                ('sale', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.sale')),
            ],
        ),
        migrations.CreateModel(
            name='SalesReturn',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('num_returned', models.PositiveIntegerField()),
                ('sale', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.sale')),
                ('sold_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.sold_item')),
            ],
        ),
        migrations.CreateModel(
            name='SalesPayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('amount', models.FloatField()),
                ('sales', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.sale')),
            ],
        ),
        migrations.CreateModel(
            name='SalesAllowance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('amount', models.FloatField()),
                ('sales', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.sale')),
            ],
        ),
        migrations.CreateModel(
            name='PurchaseInventory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.IntegerField(choices=[(0, 'UNPAID'), (1, 'PAID')])),
                ('purchase_date', models.DateField()),
                ('due_date', models.DateField(blank=True, help_text='optional if you want to specify it by yourself', null=True)),
                ('frieght_in', models.FloatField(default=0)),
                ('num_returend', models.IntegerField(blank=True, default=0, null=True)),
                ('cost_returned', models.FloatField(blank=True, default=0, null=True)),
                ('total_purchases', models.FloatField(blank=True, null=True)),
                ('net_purchases', models.FloatField(blank=True, null=True)),
                ('total_amount_paid', models.FloatField(blank=True, default=0, null=True)),
                ('allowance', models.FloatField(blank=True, default=0, null=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('supplier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='suppliers.supplier')),
                ('term', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.paymentsalesterm')),
            ],
            bases=(inventory.models.DueDateMixin, models.Model),
        ),
    ]
