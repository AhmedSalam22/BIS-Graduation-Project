# Generated by Django 3.2.6 on 2022-03-19 20:20

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('inventory', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Accounts',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('account', models.CharField(max_length=250)),
                ('normal_balance', models.CharField(choices=[('Debit', 'Debit'), ('Credit', 'Credit')], default='Debit', max_length=7)),
                ('account_type', models.CharField(choices=[('Assest', 'Assets'), ('Investment', 'Investment'), ('liabilities', 'Liabilities'), ('Revenue', 'Revenue'), ('Expenses', 'Expenses'), ('Drawings', 'Drawings')], max_length=50)),
                ('classification', models.CharField(blank=True, choices=[('Current Assets', (('Current Assets', 'Current Assets'), ('Cash', 'Cash'), ('Marketable securities or short-term investments', 'Marketable securities or short-term investments'), ('Receivable', 'Receivable'), ('Inventory', 'Inventory'), ('prepaids', 'prepaids'))), ('Property, plant, and equipment', 'Property, plant, and equipment'), ('Intangible assets', 'Intangible assets'), ('Long-term investments', 'Long-term investments'), ('Contra', (('Contra Assets', 'Contra Assets'), ('Allowance for Doubtful Accounts', 'Allowance for Doubtful Accounts'), ('Revenue-Contra', 'Revenue-Contra'))), ('Liabilities', (('Current liabilities', 'Current liabilities'), ('Long-term liabilities', 'Long-term liabilities'))), ('Revenue', (('Sales', 'Sales'), ('Other Revenue and gains', 'Other Revenue and gains'))), ('Expenses', (('COGS', 'Cost of Goods Sold'), ('Operating Expense', 'Operating Expense'), ('Other Expenses And Losses', 'Other Expenses And Losses')))], max_length=90, null=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Account',
                'verbose_name_plural': 'Accounts',
            },
        ),
        migrations.CreateModel(
            name='ReportingPeriodConfig',
            fields=[
                ('owner', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='fs_reporting_period', serialize=False, to='auth.user')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('company_name', models.CharField(blank=True, max_length=300, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('comment', models.CharField(blank=True, max_length=2500, null=True)),
                ('status', models.IntegerField(blank=True, choices=[(1, 'Purchase Inventory'), (2, 'Purchase return'), (3, 'Purchase Allowance'), (4, 'Freight in'), (5, 'Pay Invoice'), (6, 'Sales'), (7, 'Sales Return'), (8, 'Sales Allowance'), (9, 'Received Payment')], null=True)),
                ('inventory_price', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='inventory.inventoryprice')),
                ('inventory_return', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='inventory.inventoryreturn')),
                ('pay_invoice', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='inventory.payinvoice')),
                ('purchase_allowance', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='inventory.inventoryallowance')),
                ('purchase_inventory', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='inventory.purchaseinventory')),
                ('received_payment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='inventory.salespayment')),
                ('sales_allowance', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='inventory.salesallowance')),
                ('sales_return', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='inventory.salesreturn')),
                ('sold_item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='inventory.sold_item')),
            ],
        ),
        migrations.CreateModel(
            name='Journal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('balance', models.FloatField()),
                ('transaction_type', models.CharField(choices=[('Debit', 'Debit'), ('Credit', 'Credit')], default='Debit', max_length=7)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sole_proprietorship.accounts')),
                ('transaction', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='sole_proprietorship.transaction')),
            ],
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['date'], name='date_idx'),
        ),
        migrations.AddIndex(
            model_name='accounts',
            index=models.Index(fields=['account', 'owner'], name='account_idx'),
        ),
        migrations.AddIndex(
            model_name='accounts',
            index=models.Index(fields=['owner'], name='acc_owner_idx'),
        ),
        migrations.AddConstraint(
            model_name='accounts',
            constraint=models.UniqueConstraint(fields=('account', 'owner'), name='unique_account'),
        ),
    ]
